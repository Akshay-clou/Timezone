package com.automationanywhere.botcommand.samples.commands.basic;
import com.automationanywhere.botcommand.data.Value;
import com.automationanywhere.botcommand.data.impl.BooleanValue;
import com.automationanywhere.botcommand.data.impl.StringValue;
import com.automationanywhere.botcommand.exception.BotCommandException;
import com.automationanywhere.commandsdk.annotations.BotCommand;
import com.automationanywhere.commandsdk.annotations.CommandPkg;
import com.automationanywhere.commandsdk.annotations.Execute;
import com.automationanywhere.commandsdk.annotations.Idx;
import com.automationanywhere.commandsdk.annotations.Pkg;
import com.automationanywhere.commandsdk.annotations.rules.NotEmpty;
import com.automationanywhere.commandsdk.i18n.Messages;
import com.automationanywhere.commandsdk.i18n.MessagesFactory;
import static com.automationanywhere.commandsdk.model.AttributeType.TEXT;
import static com.automationanywhere.commandsdk.model.DataType.STRING;
/**
 *<pre>

 * </pre>
 *
 * @author Avinash Rana
 */

//BotCommand makes a class eligible for being considered as an action.
@BotCommand
//CommandPks adds required information to be dispalable on GUI.
@CommandPkg(
        //Unique name inside a package and label to display.
        name = "isNumeric", label = "[[isNumeric.label]]",
        node_label = "[[isNumeric.node_label]]", description = "[[isNumeric.description]]", icon = "pkg.svg",
        //Return type information. return_type ensures only the right kind of variable is provided on the UI.
        return_label = "[[isNumeric.return_label]]", return_type = STRING, return_required = true)
public class IsNumeric {
    //Messages read from full qualified property file name and provide i18n capability.
    private static final Messages MESSAGES = MessagesFactory
            .getMessages("com.automationanywhere.botcommand.samples.messages");
    //Identify the entry point for the action. Returns a Value<String> because the return type is String.
    @Execute
    public Value<String> action(
            //Idx 1 would be displayed first, with a text box for entering the value.
            @Idx(index = "1", type = TEXT)
            //UI labels.
            @Pkg(label = "[[isNumeric.firstString.label]]")
            //Ensure that a validation error is thrown when the value is null.
            @NotEmpty
                    String firstString) {
        //Internal validation, to disallow empty strings. No null check needed as we have NotEmpty on firstString.
        if ("".equals(firstString.trim()))
            throw new BotCommandException(MESSAGES.getString("emptyInputString", "firstString"));
              //Business logic
        boolean flag= firstString.matches("[-+]?\\d*\\.?\\d+");
        String output;
        if(flag)
            output="true";
        else
            output="false";
        return  new StringValue(output);

    }}